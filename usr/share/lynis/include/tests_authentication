#!/bin/sh

#################################################################################
#
#   Lynis
# ------------------
#
# Copyright 2007-2015, Michael Boelen, CISOfy (michael.boelen@cisofy.com)
# Web site: https://cisofy.com
#
# Lynis comes with ABSOLUTELY NO WARRANTY. This is free software, and you are
# welcome to redistribute it under the terms of the GNU General Public License.
# See LICENSE file for usage of this software.
#
#################################################################################
#
# User, Group and authentication tests
#
#################################################################################
#
    LDAP_AUTH_ENABLED=0
    LDAP_PAM_ENABLED=0
    LDAP_CONF_LOCATIONS="/etc/ldap.conf /etc/ldap/ldap.conf /etc/openldap/ldap.conf /usr/local/etc/ldap.conf /usr/local/etc/openldap/ldap.conf"
    PAM_FILE_LOCATIONS="/lib/i386-linux-gnu/security /lib/security /lib/x86_64-linux-gnu/security /lib64/security /usr/lib/security"
    SUDOERS_LOCATIONS="/etc/sudoers /usr/local/etc/sudoers /usr/pkg/etc/sudoers"
    SUDOERS_FILE=""
#
#################################################################################
#
    InsertSection "Users, Groups and Authentication"

    # Test        : AUTH-9204
    # Description : Check users with UID zero (0)
    Register --test-no AUTH-9204 --weight L --network NO --description "Check users with an UID of zero"
    if [ ${SKIPTEST} -eq 0 ]; then
        # Search accounts with UID 0
        logtext "Test: Searching accounts with UID 0"
        FIND=`grep ':0:' /etc/passwd | egrep -v '^#|^root:|^:0:0:::' | cut -d ":" -f1,3 | grep ':0'`
        if [ ! "${FIND}" = "" ]; then
            Display --indent 2 --text "- Search administrator accounts" --result WARNING --color RED
            logtext "Result: Found more than one administrator accounts"
            ReportWarning "${TEST_NO}" "H" "Multiple users with UID 0 found in passwd file"
            for I in ${FIND}; do
                logtext "Administrator account: ${I}"
                if [ "${I}" = "toor" ]; then
                    logtext "BSD note: default there is a user 'toor' installed. This account is considered useless unless it"
                    logtext "is assigned a password and used for daily operations or emergencies. ie: bad shell for root user."
                    ReportSuggestion ${TEST_NO} "Use vipw to delete the 'toor' user if not used."
                fi
            done
          else
            Display --indent 2 --text "- Search administrator accounts" --result OK --color GREEN
            logtext "Result: No accounts found with UID 0 other than root."
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9208
    # Description : Check non-unique accounts
    Register --test-no AUTH-9208 --weight L --network NO --description "Check non-unique accounts in passwd file"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: Checking for non-unique accounts"
        if  [ "${OS}" = "DragonFly" -o "${OS}" = "FreeBSD" -o "${OS}" = "NetBSD" ]; then
            PASSWD_FILE="/etc/master.passwd"
          else
            PASSWD_FILE="/etc/passwd"
        fi
        # Check password file
        if [ -f ${PASSWD_FILE} ]; then
            FIND=`cat ${PASSWD_FILE} | grep -v '^#' | cut -d ':' -f3 | uniq -d`
            if [ "${FIND}" = "" ]; then
                Display --indent 2 --text "- Checking for non-unique UIDs" --result OK --color GREEN
                logtext "Result: all accounts found in ${PASSWD_FILE} are unique"
              else
                Display --indent 2 --text "- Checking for non-unique UIDs" --result WARNING --color RED
                logtext "Result: found multiple accounts with same UID"
                logtext "Output (non-unique UIDs): ${FIND}"
                ReportWarning ${TEST_NO} "Multiple accounts found with same UID"
            fi
          else
            Display --indent 2 --text "- Checking UIDs" --result SKIPPED --color WHITE
            logtext "Result: test skipped, ${PASSWD_FILE} file not available"
        fi
        logtext "Remarks: Non unique UIDs can riskful for the system or part of a configuration mistake"
    fi
#
#################################################################################
#
    # Test        : AUTH-9212
    # Description : Test group file with chkgrp tool (ie FreeBSD)
    if [ -f /usr/sbin/chkgrp ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
    Register --test-no AUTH-9212 --preqs-met ${PREQS_MET} --weight L --network NO --description "Test group file"
    if [ ${SKIPTEST} -eq 0 ]; then
        Display --indent 2 --text "- Checking chkgrp tool" --result FOUND --color GREEN
        logtext "Result: /usr/sbin/chkgrp binary found. Using this to perform next test(s)."
        logtext "Test: Testing consistency of /etc/group file"
        FIND=`/usr/sbin/chkgrp | grep -v 'is fine'`
        if [ "${FIND}" = "" ]; then
            Display --indent 4 --text "- Checking consistency of /etc/group file" --result OK --color GREEN
            logtext "Result: chkgrp test performed, Group file seems to be ok."
          else
            Display --indent 4 --text "- Checking consistency of /etc/group file" --result WARNING --color RED
            logtext "Result: chkgrp found some errors. Run the tool manually to see details."
            logtext "chkgrp output: ${FIND}"
            ReportWarning ${TEST_NO} "M" "chkgrp reported inconsistencies in /etc/group file"
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9216
    # Description : Check /etc/group and shadow group files
    if [ ! "${GRPCKBINARY}" = "" ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
    Register --test-no AUTH-9216 --preqs-met ${PREQS_MET} --weight L --network NO --root-only YES --description "Check group and shadow group files"
    if [ ${SKIPTEST} -eq 0 ]; then
        # Test            : run grpck to test group files (most likely /etc/group and shadow group files)
        # Expected result : 0 (exit code)
        logtext "Test: Checking for grpck binary"

        if [ "${OS}" = "Linux" ]; then
            # Read only mode
            FIND=`${GRPCKBINARY} -r 2> /dev/null ; echo $?`
          elif [ "${OS}" = "AIX" ]; then
            FIND=`${GRPCKBINARY} -n ALL 2> /dev/null ; echo $?`
          else
            FIND=`${GRPCKBINARY} 2> /dev/null ; echo $?`
        fi

        # Overrule for SuSE
        if [ "${LINUX_VERSION}" = "SuSE" ]; then
            FIND=`${GRPCKBINARY} -q -r > /dev/null ; echo $?`
        fi

        # Check exit-code
        if [ "${FIND}" = "0" ]; then
            Display --indent 2 --text "- Checking consistency of group files (grpck)" --result OK --color GREEN
            logtext "Result: grpck binary didn't find any errors in the group files"
          else
            Display --indent 2 --text "- Checking consistency of group files (grpck)" --result WARNING --color RED
            ReportWarning ${TEST_NO} "M" "grpck binary found errors in one or more group files"
            ReportSuggestion ${TEST_NO} "Run grpck manually and check your group files"
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9218
    # Description : Check login shells for passwordless accounts
    # Notes       : Results should be checked
    Register --test-no AUTH-9218 --os FreeBSD --weight L --network NO --description "Check harmful login shells"
    if [ ${SKIPTEST} -eq 0 ]; then
        FOUND=0
        logtext "Test: Checking login shells"
        if [ -f /etc/master.passwd ]; then
            # Check for all shells, except: (/usr)/sbin/nologin /nonexistent
            FIND=`cat /etc/master.passwd | grep "[a-z]:\*:" | egrep -v '^#|/sbin/nologin|/usr/sbin/nologin|/nonexistent' | sed 's/ /!space!/g'`
            if [ "${FIND}" = "" ]; then
                Display --indent 2 --text "- Checking login shells" --result OK --color GREEN
              else
                Display --indent 2 --text "- Checking login shells" --result WARNING --color RED
                for I in ${FIND}; do
                    I=`echo ${I} | sed 's/!space!/ /g'`
                    J=`echo ${I} | awk -F: '{ print $10 }'`
                    logtext "Output: ${I}"
                    if [ "${J}" = "" ]; then
                        logtext "Result: found no shell on line"
                      else
                        logtext "Result: found possible harmful shell ${J}"
                        if [ -f ${J} ]; then
                            logtext "Result: shell ${J} does exist"
                            FOUND=1
                          else
                            logtext "Result: shell ${J} does not exist"
                            ReportSuggestion ${TEST_NO} "Determine if account is needed, as shell ${J} does not exist"
                        fi
                    fi
                done
                if [ ${FOUND} -eq 1 ]; then
                    ReportWarning ${TEST_NO} "H" "Possible harmful shell found (for passwordless account!)"
                fi
             fi
          else
            Display --indent 2 --text "- Checking login shells" --result SKIPPED --color WHITE
            logtext "Result: No /etc/master.passwd file found"
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9222
    # Description : Check for non unique groups
    Register --test-no AUTH-9222 --weight L --network NO --description "Check for non unique groups"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: Checking for non unique group ID's in /etc/group"
        FIND=`cat /etc/group | grep -v '^#' | grep -v '^$' | awk -F: '{ print $3 }' | sort | uniq -d`
        if [ "${FIND}" = "" ]; then
            Display --indent 2 --text "- Checking non unique group ID's" --result OK --color GREEN
            logtext "Result: All group ID's are unique"
          else
            Display --indent 2 --text "- Checking non unique group ID's" --result WARNING --color RED
            logtext "Result: Found the same group ID multiple times"
            logtext "Output: ${FIND}"
            ReportWarning ${TEST_NO} "H" "Found multiple groups with same group ID"
            #ReportSuggestion ${TEST_NO} "Check your /etc/group file and correct inconsistencies"
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9226
    # Description : Check non unique group names
    if [ -f /etc/group ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
    Register --test-no AUTH-9226 --preqs-met ${PREQS_MET} --weight L --network NO --description "Check non unique group names"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: Checking for non unique group names in /etc/group"
        FIND=`cat /etc/group | grep -v '^#' | grep -v '^$' | awk -F: '{ print $1 }' | sort | uniq -d`
        if [ "${FIND}" = "" ]; then
            Display --indent 2 --text "- Checking non unique group names" --result OK --color GREEN
            logtext "Result: All group names are unique"
          else
            Display --indent 2 --text "- Checking non unique group names" --result WARNING --color WARNING
            logtext "Result: Found the same group name multiple times"
            logtext "Output: ${FIND}"
            ReportWarning ${TEST_NO} "M" "Found inconsistencies in group file (multiple occurences of a single group)"
            ReportSuggestion ${TEST_NO} "Check your /etc/group file and correct inconsistencies"
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9228
    # Description : Check Linux password file consistency
    if [ -x /usr/sbin/pwck ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
    Register --test-no AUTH-9228 --os Linux --preqs-met ${PREQS_MET} --weight L --network NO --description "Check password file consistency"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: Checking password file consistency (pwck)"
        FIND=`/usr/sbin/pwck -q -r 2> /dev/null; echo $?`
        if [ "${FIND}" = "0" ]; then
            Display --indent 2 --text "- Checking password file consistency" --result OK --color GREEN
            logtext "Result: pwck check didn't find any problems"
          else
            Display --indent 2 --text "- Checking password file consistency" --result WARNING --color RED
            logtext "Result: pwck found one or more errors/warnings in the password file."
            ReportWarning ${TEST_NO} "M" "pwck found one or more errors/warnings in the password file"
            ReportSuggestion ${TEST_NO} "Run pwck manually and correct found issues."
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9230
    # Description : Check Solaris password file consistency
    if [ -x /usr/sbin/pwck ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
    Register --test-no AUTH-9230 --os Solaris --preqs-met ${PREQS_MET} --weight L --network NO --description "Check password file consistency"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: Checking password file consistency (pwck)"
        FIND=`/usr/sbin/pwck 2> /dev/null; echo $?`
        if [ "${FIND}" = "0" ]; then
            Display --indent 2 --text "- Checking password file consistency" --result OK --color GREEN
            logtext "Result: pwck finished didn't find problems"
          else
            Display --indent 2 --text "- Checking password file consistency" --result WARNING --color RED
            logtext "Result: pwck found one or more errors/warnings in the password file."
            ReportWarning ${TEST_NO} "M" "pwck found one or more errors/warnings in the password file"
            ReportSuggestion ${TEST_NO} "Run pwck manually and correct found issues."
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9234
    # Description : Query user accounts
    # Notes       : HPUX > 100
    #               MacOS: need to be improved (just reading passwd file is not enough)
    #               OpenBSD/NetBSD: unknown
    #               Arch Linux / CentOS / Ubuntu: 1000+
    Register --test-no AUTH-9234 --os Linux --weight L --network NO --description "Query user accounts"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: Read system users (including root user) from /etc/passwd"
        FIND=""

        case ${OS} in
            "FreeBSD")
                logtext "FreeBSD real users output (ID = 0, or 1000+, but not 65534):"
                FIND=`awk -F: '($3 >= 1000) && ($3 != 65534) || ($3 == 0) { print $1","$3 }' /etc/passwd`
            ;;

            "Linux")
                logtext "Linux real users output (ID = 0, or 500+, but not 65534):"
                FIND=`awk -F: '($3 >= 1000) && ($3 != 65534) || ($3 == 0) { print $1","$3 }' /etc/passwd`
            ;;

            "Solaris")
                logtext "Solaris real users output (ID =0, or 100+, but not 60001/65534):"
                FIND=`awk -F: '($3 >= 100 && $3 != 60001 && $3 != 65534) || ($3 == 0) { print $1","$3 }' /etc/passwd`
            ;;
            *)
                # Want to help improving Lynis? Determine what user IDs belong to normal user accounts
                ReportException "${TEST_NO}:1" "Can not determine user accounts"
            ;;
        esac

        # Check if we got any output
        if [ "${FIND}" = "" ]; then
            Display --indent 4 --text "Result: No users found/unknown result"
            logtext "Result: Querying of system users skipped"
            Display --indent 2 --text "- Query system users (non daemons)" --result UNKNOWN --color YELLOW
          else
            Display --indent 2 --text "- Query system users (non daemons)" --result DONE --color GREEN
            for I in ${FIND}; do
              logtext "Real user: ${I}"
              report "real_user[]=${I}"
            done
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9240
    # Description : Query NIS+ authentication support
    Register --test-no AUTH-9240 --weight L --network NO --description "Query NIS+ authentication support"
    if [ ${SKIPTEST} -eq 0 ]; then
        if [ -f /etc/nsswitch.conf ]; then
            FIND=`egrep "^passwd" /etc/nsswitch.conf | egrep "compat|nisplus"`
            if [ "${FIND}" = "" ]; then
                logtext "Result: NIS+ authentication not enabled"
                Display --indent 2 --text "- Checking NIS+ authentication support" --result "NOT ENABLED" --color WHITE
              else
                FIND2=`egrep "^passwd_compat" /etc/nsswitch.conf | grep "nisplus"`
                FIND3=`egrep "^passwd" /etc/nsswitch.conf | grep "nisplus"`
                if [ ! "${FIND2}" = "" -o ! "${FIND3}" = "" ]; then
                    logtext "Result: NIS+ authentication enabled"
                    Display --indent 2 --text "- Checking NIS+ authentication support" --result "ENABLED" --color GREEN
                  else
                    logtext "Result: NIS+ authentication not enabled"
                    Display --indent 2 --text "- Checking NIS+ authentication support" --result "NOT ENABLED" --color WHITE
                fi
            fi
          else
            logtext "Result: /etc/nsswitch.conf not found"
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9242
    # Description : Query NIS authentication support
    Register --test-no AUTH-9242 --weight L --network NO --description "Query NIS authentication support"
    if [ ${SKIPTEST} -eq 0 ]; then
        if [ -f /etc/nsswitch.conf ]; then
            FIND=`egrep "^passwd" /etc/nsswitch.conf | egrep "compat|nis" | grep -v "nisplus"`
            if [ "${FIND}" = "" ]; then
                logtext "Result: NIS authentication not enabled"
                Display --indent 2 --text "- Checking NIS authentication support" --result "NOT ENABLED" --color WHITE
              else
                FIND2=`egrep "^passwd_compat" /etc/nsswitch.conf | grep "nis" | grep -v "nisplus"`
                FIND3=`egrep "^passwd" /etc/nsswitch.conf | grep "nis" | grep -v "nisplus"`
                if [ ! "${FIND2}" = "" -o ! "${FIND3}" = "" ]; then
                    logtext "Result: NIS authentication enabled"
                    Display --indent 2 --text "- Checking NIS authentication support" --result "ENABLED" --color GREEN
                  else
                    logtext "Result: NIS authentication not enabled"
                    Display --indent 2 --text "- Checking NIS authentication support" --result "NOT ENABLED" --color WHITE
                fi
            fi
          else
            logtext "Result: /etc/nsswitch.conf not found"
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9250
    # Description : Check for sudoers file
    Register --test-no AUTH-9250 --weight L --network NO --description "Checking sudoers file"
    if [ ${SKIPTEST} -eq 0 ]; then
        FOUND=0
        for I in ${SUDOERS_LOCATIONS}; do
            logtext "Test: checking presence ${I}"
            if [ -f ${I} ]; then
                FOUND=1
                SUDOERS_FILE="${I}"
                logtext "Result: found file (${SUDOERS_FILE})"
              else
                logtext "Result: file ${I} not found"
            fi
        done
        if [ ${FOUND} -eq 1 ]; then
            logtext "Result: sudoers file found (${SUDOERS_FILE})"
            Display --indent 2 --text "- Checking sudoers file" --result FOUND --color GREEN
          else
            logtext "Result: sudoers file NOT found"
            Display --indent 2 --text "- Checking sudoers file" --result "NOT FOUND" --color YELLOW
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9252
    # Description : Check for sudoers file permissions
    if [ ! "${SUDOERS_FILE}" = "" ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
    Register --test-no AUTH-9252 --preqs-met ${PREQS_MET} --weight L --network NO --description "Check sudoers file"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: checking sudoers file (${SUDOERS_FILE}) permissions"
        FIND=`ls -l ${SUDOERS_FILE} | cut -c 2-10`
        logtext "Result: Found file permissions: ${FIND}"
        if [ "${FIND}" = "rw-------" -o "${FIND}" = "rw-rw----" -o "${FIND}" = "r--r-----" ]; then
            logtext "Result: file ${SUDOERS_FILE} has correct permissions"
            Display --indent 4 --text "- Check sudoers file permissions" --result OK --color GREEN
          else
            logtext "Result: file has possibly unsafe file permissions"
            Display --indent 4 --text "- Check sudoers file permissions" --result WARNING --color RED
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9254
    # Description : Solaris test to check passwordless accounts
    Register --test-no AUTH-9254 --os Solaris --weight L --network NO --description "Solaris passwordless accounts"
    if [ ${SKIPTEST} -eq 0 ]; then
        FIND=`logins -p | awk '{ print $1 }'`
        if [ "${FIND}" = "" ]; then
            logtext "Result: no passwordless accounts found"
            Display --indent 2 --text "- Checking passwordless accounts on Solaris" --result OK --color GREEN
          else
            for I in ${FIND}; do
                ReportWarning ${TEST_NO} "H" "Found passwordless account (${I})"
            done
            Display --indent 2 --text "- Checking passwordless accounts on Solaris" --result WARNING --color RED
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9262
    # Description : Search for PAM password strength testing libraries
    Register --test-no AUTH-9262 --weight L --network NO --description "Checking presence password strength testing tools (PAM)"
    if [ ${SKIPTEST} -eq 0 ]; then
        FOUND=0
        FOUND_CRACKLIB=0
        FOUND_PASSWDQC=0

        # Cracklib
        logtext "Searching cracklib PAM module"
        for I in ${PAM_FILE_LOCATIONS}; do
            if [ -f ${I}/pam_cracklib.so ]; then
                FOUND_CRACKLIB=1
                logtext "Result: found pam_cracklib.so (crack library PAM) in ${I}"
            fi
        done
        if [ ${FOUND_CRACKLIB} -eq 1 ]; then
            logtext "Result: pam_cracklib.so found"
            report "pam_cracklib=1"
            AddHP 3 3
            FOUND=1
          else
            logtext "Result: pam_cracklib.so NOT found (crack library PAM)"
            AddHP 1 3
        fi

        # Passwd quality control
        logtext "Searching passwdqc PAM module"
        for I in ${PAM_FILE_LOCATIONS}; do
            if [ -f ${I}/pam_passwdqc.so ]; then
                FOUND_PASSWDQC=1
                logtext "Result: found pam_passwdqc.so (passwd quality control PAM) in ${I}"
            fi
        done
        if [ ${FOUND_PASSWDQC} -eq 1 ]; then
            logtext "Result: pam_passwdqc.so found"
            report "pam_passwdqc=1"
            AddHP 3 3
            FOUND=1
          else
            logtext "Result: pam_passwdqc.so NOT found (passwd quality control PAM)"
            AddHP 1 3
        fi

        if [ ${FOUND} -eq 0 ]; then
            Display --indent 2 --text "- Checking PAM password strength tools" --result "SUGGESTION" --color YELLOW
            logtext "Result: no PAM modules for password strength testing found"
            ReportSuggestion ${TEST_NO} "Install a PAM module for password strength testing like pam_cracklib or pam_passwdqc"
          else
            Display --indent 2 --text "- Checking PAM password strength tools" --result OK --color GREEN
            logtext "Result: found at least one PAM module for password strength testing"
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9264
    # Description : Scan /etc/pam.conf file
    Register --test-no AUTH-9264 --weight L --network NO --description "Checking presence pam.conf"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: Checking file /etc/pam.conf"
        if [ -f /etc/pam.conf ]; then
            logtext "Result: file /etc/pam.conf exists"
            Display --indent 2 --text "- Checking PAM configuration files (pam.conf)" --result FOUND --color GREEN
            logtext "Test: searching PAM configuration files"
            FIND=`cat /etc/pam.conf | grep -v "^#" | grep -v "^$" | sed 's/[[:space:]]/ /g' | sed 's/  / /g' | sed 's/ /:space:/g'`
            if [ "${FIND}" = "" ]; then
                logtext "Result: File has no configuration options defined (empty, or only filled with comments and empty lines)"
              else
                logtext "Result: found one or more configuration lines"
                for I in ${FIND}; do
                    I=`echo ${I} | sed 's/:space:/ /g'`
                    logtext "Found line: ${I}"
                done
            fi
          else
            logtext "Result: file /etc/pam.conf could not be found"
            Display --indent 2 --text "- Checking PAM configuration file (pam.conf)" --result "NOT FOUND" --color WHITE
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9266
    # Description : Searching available PAM configurations (/etc/pam.d)
    Register --test-no AUTH-9266 --weight L --network NO --description "Checking presence pam.d files"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: Checking directory /etc/pam.d"
        if [ -d /etc/pam.d ]; then
            logtext "Result: directory /etc/pam.d exists"
            Display --indent 2 --text "- Checking PAM configuration files (pam.d)" --result FOUND --color GREEN
            logtext "Test: searching PAM configuration files"
            FIND=`find /etc/pam.d -type f -print | sort`
            for I in ${FIND}; do
                logtext "Found file: ${I}"
            done
          else
            logtext "Result: directory /etc/pam.d could not be found"
            Display --indent 2 --text "- Checking PAM configuration files (pam.d)" --result "NOT FOUND" --color WHITE
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9268
    # Description : Searching available PAM files
    # Notes       : PAM is used on AIX, Linux, HPUX, Solaris
    if [ ${OS} = "AIX" -o ${OS} = "Linux" -o ${OS} = "HPUX" -o ${OS} = "Solaris" ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
    Register --test-no AUTH-9268 --preqs-met ${PREQS_MET} --weight L --network NO --description "Checking presence pam.d files"
    if [ ${SKIPTEST} -eq 0 ]; then
        FOUND=0
        logtext "Test: Searching pam modules"
        for I in ${PAM_FILE_LOCATIONS}; do
            logtext "Test: Checking ${I}"
            if [ -d ${I} -a ! -L ${I} ]; then
                logtext "Result: directory ${I} exists"
                FIND=`find ${I} -type f -name "*.so" -print | sort`
                if [ ! "${FIND}" = "" ]; then FOUND=1; fi
                for I in ${FIND}; do
                    logtext "Found file: ${I}"
                    report "pam_module[]=${I}"
                done
              else
                logtext "Result: directory ${I} could not be found or is a symlink to another directory"
            fi
        done
        # Check if we found at least one module
        if [ ${FOUND} -eq 0 ]; then
            Display --indent 2 --text "- Checking PAM modules" --result "NOT FOUND" --color WHITE
            logtext "Result: no PAM modules found"
          else
            Display --indent 2 --text "- Checking PAM modules" --result FOUND --color GREEN
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9278
    # Description : Search LDAP support in PAM files
    Register --test-no AUTH-9278 --weight L --network NO --description "Checking LDAP pam status"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: checking presence /etc/pam.d/common-auth"
        if [ -f /etc/pam.d/common-auth ]; then
            logtext "Result: file /etc/pam.d/common-auth exists"
            logtext "Test: checking presence LDAP module"
            FIND=`cat /etc/pam.d/common-auth | grep "^auth" | grep "ldap"`
            if [ ! "${FIND}" = "" ]; then
                logtext "Result: LDAP module present"
                logtext "Output: ${FIND}"
                Display --indent 2 --text "- Checking LDAP module in PAM" --result FOUND --color GREEN
                LDAP_AUTH_ENABLED=1
                LDAP_PAM_ENABLED=1
              else
                logtext "Result: LDAP module not found"
                Display --indent 2 --text "- Checking LDAP module in PAM" --result "NOT FOUND" --color WHITE
            fi
          else
            logtext "Result: file /etc/pam.d/common-auth not found, skipping test"
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9282 and AUTH-9283
    # Note        : Every Linux based operating system seem to have different passwd
    #               options, so we have to check the version first.
    if [ "${OS}" = "Linux" ]; then
        if [ ${OS_REDHAT_OR_CLONE} -eq 0 ]; then
            case ${LINUX_VERSION} in
                "SuSE")
                    PREQS_MET="YES"
                    FIND=`passwd -a -S 2> /dev/null | awk '{ if ($2=="P" && $5=="99999") print $1 }'`
                    FIND2=`passwd -a -S 2> /dev/null | awk '{ if ($2=="NP") print $1 }'`
                    ;;
                *)
                    PREQS_MET="YES"
                    FIND=`passwd --all --status 2> /dev/null | awk '{ if ($2=="P" && $5=="99999") print $1 }'`
                    FIND2=`passwd --all --status 2> /dev/null | awk '{ if ($2=="NP") print $1 }'`
                    ;;
            esac
          else
            logtext "Result: skipping test for this Linux version"
            ReportManual "AUTH-9282:01"
            PREQS_MET="NO"
            FIND=""
            FIND2=""
        fi
     else
        PREQS_MET="NO"
    fi

    # Test        : AUTH-9282
    # Description : Search password protected accounts without expire (Linux)
    Register --test-no AUTH-9282 --preqs-met ${PREQS_MET} --weight L --network NO --description "Checking password protected account without expire date"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: Checking Linux version and password expire date status"
            if [ "${FIND}" = "" ]; then
                logtext "Result: all accounts seem to have an expire date"
                Display --indent 2 --text "- Checking accounts without expire date" --result OK --color GREEN
              else
                logtext "Result: found one or more accounts with expire date set"
                for I in ${FIND}; do
                  logtext "Account without expire date: ${I}"
                done
                Display --indent 2 --text "- Checking accounts without expire date" --result SUGGESTION --color YELLOW
                ReportSuggestion ${TEST_NO} "When possible set expire dates for all password protected accounts"
            fi
    fi
    # Test        : AUTH-9283
    # Description : Search passwordless accounts
    Register --test-no AUTH-9283 --preqs-met ${PREQS_MET} --weight L --network NO --description "Checking accounts without password"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: Checking passwordless accounts"
            if [ "${FIND2}" = "" ]; then
                logtext "Result: all accounts seem to have a password"
                Display --indent 2 --text "- Checking accounts without password" --result OK --color GREEN
              else
                logtext "Result: found one or more accounts without password"
                for I in ${FIND2}; do
                    logtext "Account without password: ${I}"
                    report "account_without_password=${I}"
                done
                Display --indent 2 --text "- Checking accounts without password" --result WARNING --color RED
                ReportWarning ${TEST_NO} "Found accounts without password"
            fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9286
    # Description : Check user password aging (modified by kylin)
    if [ -f /etc/login.defs ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
    Register --test-no AUTH-9286 --preqs-met ${PREQS_MET} --weight L --network NO --description "Checking user password aging"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: Checking PASS_MAX_DAYS, PASS_MIN_DAYS, PASS_WARN_AGE option in /etc/login.defs "
        FIND_MIN=`grep "^PASS_MIN_DAYS" /etc/login.defs | awk '{ if ($1=="PASS_MIN_DAYS") { print $2 } }'`
        FIND_MAX=`grep "^PASS_MAX_DAYS" /etc/login.defs | awk '{ if ($1=="PASS_MAX_DAYS") { print $2 } }'`
        FIND_WARN=`grep "^PASS_WARN_AGE" /etc/login.defs | awk '{ if ($1=="PASS_WARN_AGE") { print $2 } }'`
        if [ "${FIND_MAX}" = "" -o "${FIND_MAX}" = "99999" -o $FIND_MAX -gt 90 ]; then
            logtext "Result: password max days limits are not configured"
            Display --indent 2 --text "- Checking user password max days" --result DISABLED --color YELLOW
            ReportSuggestion ${TEST_NO} "Configure PASS_MAX_DAYS limits to enforce password changing less than 90"
            AddHP 0 1
          else
            logtext "Result: accounts with password aging set are checked against PASS_MAX_DAYS"
            logtext "Result: value of PASS_MAX_DAYS is ${FIND_MAX}"
            Display --indent 2 --text "- Checking user password max days" --result OK --color GREEN
            AddHP 1 1
        fi
        if [ "${FIND_MIN}" = "" -o $FIND_MIN -lt 6 ]; then
            logtext "Result: password min days limits are not configured"
            Display --indent 2 --text "- Checking user password min days" --result DISABLED --color YELLOW
            ReportSuggestion ${TEST_NO} "Configure PASS_MIN_DAYS limits to allow password changing at least 6 days"
            AddHP 0 1
          else
            logtext "Result: accounts with password aging set are checked against PASS_MIN_DAYS"
            logtext "Result: value of PASS_MIN_DAYS is ${FIND_MIN}"
            Display --indent 2 --text "- Checking user password min days" --result OK --color GREEN
            AddHP 1 1
        fi
        if [ "${FIND_WARN}" = "" -o $FIND_WARN -lt 30 ]; then
            logtext "Result: password warn age limits are not configured"
            Display --indent 2 --text "- Checking user password warn age" --result DISABLED --color YELLOW
            ReportSuggestion ${TEST_NO} "Configure PASS_WARN_AGE to warn user to change password before expired"
            AddHP 0 1
          else
            logtext "Result: accounts with password aging set are checked against PASS_WARN_AGE"
            logtext "Result: value of PASS_WARN_AGE is ${FIND_WARN}"
            Display --indent 2 --text "- Checking user password warn age" --result OK --color GREEN
            AddHP 1 1
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9304
    # Description : Check if single user mode login is properly configured in Solaris
    # Notes       : sulogin should be called from svm script (Solaris <10) in /etc/rcS.d
    Register --test-no AUTH-9304 --os Solaris --weight L --network NO --description "Check single user login configuration"
    if [ ${SKIPTEST} -eq 0 ]; then
        # Check if file exists (Solaris 10 does not have this file by default)
        if [ -f /etc/default/sulogin ]; then
            logtext "Result: file /etc/default/sulogin exists"
            logtext "Test: checking presence PASSREQ=NO"
            FIND=`grep "^PASSREQ=NO" /etc/default/sulogin`
            if [ "${FIND}" = "" ]; then
                logtext "Result: option not present or configured to request a password at single user mode login"
                Display --indent 2 --text "- Checking Solaris /etc/default/sulogin file" --result OK --color GREEN
                AddHP 1 1
              else
                logtext "Result: option present, no password needed at single user mode login"
                Display --indent 2 --text "- Checking Solaris /etc/default/sulogin file" --result WARNING --color RED
                ReportWarning ${TEST_NO} "H" "No password needed for single user mode login"
                AddHP 0 1
            fi
          else
            logtext "Result: file /etc/default/sulogin does not exist"
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9306
    # Description : Check if authentication is needed to boot the system
    # Notes       : :d_boot_authenticate: is a good option for production machines to
    #               avoid unauthorized booting of systems. Option :d_boot_autentication@:
    #               disabled a required login.
    Register --test-no AUTH-9306 --os HP-UX --weight L --network NO --description "Check single boot authentication"
    if [ ${SKIPTEST} -eq 0 ]; then
        # Check if file exists
        logtext "Test: Searching /tcb/files/auth/system/default"
        if [ -f /tcb/files/auth/system/default ]; then
            logtext "Result: file /tcb/files/auth/system/default exists"
            logtext "Test: checking presence :d_boot_authenticate@:"
            FIND=`grep "^:d_boot_authenticate@" /tcb/files/auth/system/default`
            if [ "${FIND}" = "" ]; then
                logtext "Result: option not set, password is needed at boot"
                Display --indent 2 --text "- Checking HP-UX boot authentication" --result OK --color GREEN
                AddHP 1 1
              else
                logtext "Result: option present, no password needed at single user mode login"
                Display --indent 2 --text "- Checking HP-UX boot authentication" --result SUGGESTION --color YELLOW
                ReportSuggestion ${TEST_NO} "Set password for system boot"
                AddHP 0 1
            fi
          else
            logtext "Result: file /tcb/files/auth/system/default does not exist"
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9308
    # Description : Check single user mode login for Linux
    Register --test-no AUTH-9308 --os Linux --weight L --network NO --description "Check single user login configuration"
    if [ ${SKIPTEST} -eq 0 ]; then
        FOUND=0
        # Check if file exists
        logtext "Test: Searching /etc/inittab"
        if [ -f /etc/inittab ]; then
            logtext "Result: file /etc/inittab exists"
            logtext "Test: checking presence sulogin for single user mode"
            FIND=`grep "^~~:S:wait:/sbin/sulogin" /etc/inittab`
            FIND2=`grep "^su:S:wait:/sbin/sulogin" /etc/inittab`
            if [ ! "${FIND}" = "" -o ! "${FIND2}" = "" ]; then
                FOUND=1
                logtext "Result: found sulogin, so single user is protected"
            fi
          else
            logtext "Result: file /etc/inittab does not exist"
        fi

        # Check if file exists
        logtext "Test: Searching /etc/sysconfig/init"
        if [ -f /etc/sysconfig/init ]; then
            logtext "Result: file /etc/sysconfig/init exists"
            logtext "Test: checking presence sulogin for single user mode"
            FIND=`grep "^SINGLE=/sbin/sulogin" /etc/sysconfig/init`
            if [ ! "${FIND}" = "" ]; then
                FOUND=1
                logtext "Result: found sulogin, so single user is protected"
            fi
          else
            logtext "Result: file /etc/inittab does not exist"
        fi
        if [ -f /etc/inittab -o -f /etc/sysconfig/init ]; then
            if [ ${FOUND} -eq 0 ]; then
                logtext "Result: option not set, no password needed at single user mode boot"
                Display --indent 2 --text "- Checking Linux single user mode authentication" --result WARNING --color RED
                ReportWarning ${TEST_NO} "L" "No password set for single mode"
                ReportSuggestion ${TEST_NO} "Set password for single user mode to minimize physical access attack surface"
                AddHP 0 2
              else
                logtext "Result: option set, password is needed at single user mode boot"
                Display --indent 2 --text "- Checking Linux single user mode authentication" --result OK --color GREEN
                AddHP 2 2
            fi
          else
             logtext "Result: No inittab or init file found, unsure if system is protected"
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9328
    # Description : Check default umask in common files (modified by kylin)
    # Notes:        This test should be moved later to shells section
    # /etc/login.defs
    # pam_umask
    Register --test-no AUTH-9328 --weight L --network NO --description "Default umask values"
    if [ ${SKIPTEST} -eq 0 ]; then
        Display --indent 2 --text "- Determining default umask"

        # umask check for KYLIN system
        KYCHECK_UMAK="/etc/csh.cshrc /etc/csh.login /etc/bashrc /etc/bash.bashrc /etc/profile"
        logtext "Test: Checking umask for KYLIN"
        for I in $KYCHECK_UMAK; do
            if [ -f $I ]; then
                logtext "Result: file $I exists"
                logtext "Test: Checking umask value in $I"
                FIND=`cat $I | grep -v "^#" | grep umask | awk '{print $2}'`
                if [ "$FIND" != "" ]; then
                    logtext "Result: found umask in $I , value is $FIND"
                    if [ "${FIND}" = "077" ]; then
                        Display --indent 4 --text "- Checking umask ($I)" --result OK --color GREEN
                        AddHP 2 2
                      else
                        Display --indent 4 --text "- Checking umask ($I)" --result SUGGESTION --color YELLOW
                        ReportSuggestion ${TEST_NO} "Default umask in $I could be more strict like 077"
                        AddHP 1 2
                    fi
                  else
                    logtext "Result: not found umask in $I"
                    Display --indent 4 --text "- Checking umask ($I)" --result "NOT FOUND" --color YELLOW
                    ReportSuggestion ${TEST_NO} "Default umask in $I could be set like 077"
                    AddHP 0 2
                fi
              else
                logtext "Result: $I does not exist"
            fi
        done

        # /etc/passwd
        logtext "Test: Checking umask entries in /etc/passwd (pam_umask)"
        if [ -f /etc/passwd ]; then
            logtext "Result: file /etc/passwd exists"
            logtext "Test: Checking umask value in /etc/profile"
            FIND=`grep "umask=" /etc/passwd`
            if [ "${FIND}" = "" ]; then
                ReportManual "AUTH-9328:03"
            fi
          else
            logtext "Result: file /etc/passwd does not exist"
        fi

        # /etc/login.defs
        logtext "Test: Checking /etc/login.defs"
        if [ -f /etc/login.defs ]; then
            logtext "Result: file /etc/profile exists"
            logtext "Test: Checking umask value in /etc/login.defs"
            FIND=`grep "^UMASK" /etc/login.defs | awk '{ print $2 }'`
            if [ "${FIND}" = "" ]; then
                logtext "Result: umask value is not configured (most likely it will have the default 022 value)"
                Display --indent 4 --text "- Checking umask (/etc/login.defs)" --result SUGGESTION --color YELLOW
                ReportSuggestion ${TEST_NO} "Default umask in /etc/login.defs could not be found and defaults usually to 022, which could be more strict like 027"
                AddHP 1 2
            elif [ "${FIND}" = "077" -o "${FIND}" = "027" ]; then
                logtext "Result: umask is ${FIND}, which is fine"
                Display --indent 4 --text "- Checking umask (/etc/login.defs)" --result OK --color GREEN
                AddHP 2 2
              else
                logtext "Result: found umask ${FIND}, which could be improved"
                Display --indent 4 --text "- Checking umask (/etc/login.defs)" --result SUGGESTION --color YELLOW
                ReportSuggestion ${TEST_NO} "Default umask in /etc/login.defs could be more strict like 027"
                AddHP 0 2
            fi
          else
            logtext "Result: file /etc/login.defs does not exist"
        fi

        # Red Hat /etc/init.d/functions
        logtext "Test: Checking /etc/init.d/functions"
        if [ -f /etc/init.d/functions ]; then
            logtext "Result: file /etc/init.d/functions exists"
            logtext "Test: Checking umask value in /etc/init.d/functions"
            FIND=`grep "^umask" /etc/init.d/functions | awk '{ print $2 }'`
            if [ "${FIND}" = "" ]; then
                logtext "Result: umask is not configured"
                Display --indent 4 --text "- Checking umask (/etc/init.d/functions)" --result NONE --color WHITE
            elif [ "${FIND}" = "077" -o "${FIND}" = "027" ]; then
                logtext "Result: umask is ${FIND}, which is fine"
                Display --indent 4 --text "- Checking umask (/etc/init.d/functions)" --result OK --color GREEN
                AddHP 2 2
              else
                logtext "Result: found umask ${FIND}, which could be improved"
                Display --indent 4 --text "- Checking umask (/etc/init.d/functions)" --result SUGGESTION --color YELLOW
                AddHP 0 2
            fi
          else
            logtext "Result: file /etc/init.d/functions does not exist"
        fi

        # /etc/init.d/rc
        logtext "Test: Checking /etc/init.d/rc"
        if [ -f /etc/init.d/rc ]; then
            logtext "Result: file /etc/init.d/rc exists"
            logtext "Test: Checking UMASK value in /etc/init.d/rc"
            FIND=`grep -i "^UMASK" /etc/init.d/rc | awk '{ print $2 }'`
            if [ "${FIND}" = "" ]; then
                logtext "Result: UMASK value is not configured (most likely it will have the default 022 value)"
                Display --indent 4 --text "- Checking umask (/etc/init.d/rc)" --result SUGGESTION --color YELLOW
                ReportSuggestion ${TEST_NO} "Default umask in /etc/init.d/rc could not be found and defaults usually to 022, which could be more strict like 027"
                AddHP 1 2
            elif [ "${FIND}" = "077" -o "${FIND}" = "027" ]; then
                logtext "Result: umask is ${FIND}, which is fine"
                Display --indent 4 --text "- Checking umask (/etc/init.d/rc)" --result OK --color GREEN
                AddHP 2 2
              else
                logtext "Result: found umask ${FIND}, which could be improved"
                Display --indent 4 --text "- Checking umask (/etc/init.d/rc)" --result SUGGESTION --color YELLOW
                ReportSuggestion ${TEST_NO} "Default umask in /etc/init.d/rc could be more strict like 027"
                AddHP 0 2
            fi
          else
            logtext "Result: file /etc/init.d/rc does not exist"
        fi

        # /etc/init.d/rcS
        logtext "Test: Checking /etc/init.d/rcS"
        if [ -f /etc/init.d/rcS ]; then
            logtext "Result: file /etc/init.d/rcS exists"
            logtext "Test: Checking if script runs another script."
            FIND=`grep -i "^exec " /etc/init.d/rcS | awk '{ print $2 }'`
            if [ "${FIND}" = "" ]; then
                FIND2=`grep -i "^UMASK" /etc/init.d/rcS | awk '{ print $2 }'`
                if [ "${FIND2}" = "" ]; then
                    logtext "Result: UMASK value is not configured (most likely it will have the default 022 value)"
                    Display --indent 4 --text "- Checking umask (/etc/init.d/rcS)" --result SUGGESTION --color YELLOW
                    ReportSuggestion ${TEST_NO} "Default umask in /etc/init.d/rcS could not be found and defaults usually to 022, which could be more strict like 027"
                    AddHP 1 2
                  elif [ "${FIND2}" = "077" -o "${FIND2}" = "027" ]; then
                    logtext "Result: umask is ${FIND2}, which is fine"
                    Display --indent 4 --text "- Checking umask (/etc/init.d/rcS)" --result OK --color GREEN
                    AddHP 2 2
                  else
                    logtext "Result: found umask ${FIND2}, which could be improved"
                    Display --indent 4 --text "- Checking umask (/etc/init.d/rcS)" --result SUGGESTION --color YELLOW
                    ReportSuggestion ${TEST_NO} "Default umask in /etc/init.d/rcS could be more strict like 027"
                    AddHP 0 2
                fi
              else
                # Improve check
                logtext "Result: exec line present in file, setting of umask not needed in this script"
                logtext "Output: ${FIND}"
            fi
          else
            logtext "Result: file /etc/init.d/rcS does not exist"
        fi

    fi
#
#################################################################################
#
    # Test        : AUTH-9336
    # Description : Check securetty for root login (add by kylin)
    Register --test-no AUTH-9336 --weight L --network NO --description "Checking securetty for root login"
    if [ ${SKIPTEST} -eq 0 ]; then
    logtext "Test: checking securetty for root login"
        FIND=`cat /etc/pam.d/login | grep "^auth" | grep pam_securetty.so`
        if [ "$FIND" != "" ]; then
            logtext "Result: FOUND securetty setting for root login"
            Display --indent 2 --text "- Checking securetty for root login" --result "ENABLED" --color GREEN
            AddHP 1 1
          else
            logtext "Result: NOT found securetty setting for root login"
            Display --indent 2 --text "- Checking securetty for root login" --result "NOT ENABLED" --color WHITE
            AddHP 0 1
        fi
    fi

#
#################################################################################
#
    # Test        : AUTH-9340
    # Description : Solaris account locking
    Register --test-no AUTH-9340 --os Solaris --weight L --network NO --description "Solaris account locking"
    if [ ${SKIPTEST} -eq 0 ]; then
        FOUND=0
        if [ -f /etc/security/policy.conf ]; then
            logtext "Result: found /etc/security/policy.conf"
            FIND=`grep "^LOCK_AFTER_RETRIES" /etc/security/policy.conf`
            if [ ! "${FIND}" = "" ]; then
                FOUND=1
                logtext "Result: account locking option set"
                logtext "Output: ${FIND}"
                AddHP 2 2
              else
                logtext "Result: option LOCK_AFTER_RETRIES not set"
                AddHP 1 2
            fi
          else
            logtext "Result: /etc/security/policy.conf does not exist"
        fi
        # If policy.conf does not exist, we most likely deal with a Solaris version below 10
        # and we proceed with checking the softer option RETRIES in /etc/default/login
        # which does not lock account, but discourages brute force password attacks.
        if [ ${FOUND} -eq 0 ]; then
            logtext "Test: checking /etc/default/login"
            if [ -f /etc/default/login ]; then
                logtext "Result: file /etc/default/login exists"
                FIND=`grep "^RETRIES" /etc/default/login`
                if [ ! "${FIND}" = "" ]; then
                    FOUND=1
                    logtext "Result: retries option configured"
                    logtext "Output: ${FIND}"
                    AddHP 2 2
                  else
                    logtext "Result: retries option not configured"
                    AddHP 1 2
                fi
              else
                logtext "Result: file /etc/default/login does not exist"
            fi
        fi
        if [ ${FOUND} -eq 1 ]; then
            Display --indent 2 --text "- Checking account locking" --result "ENABLED" --color GREEN
          else
            Display --indent 2 --text "- Checking account locking" --result "NOT ENABLED" --color YELLOW
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9402
    # Description : Query LDAP authentication support
    Register --test-no AUTH-9402 --weight L --network NO --description "Query LDAP authentication support"
    if [ ${SKIPTEST} -eq 0 ]; then
        if [ -f /etc/nsswitch.conf ]; then
            FIND=`egrep "^passwd" /etc/nsswitch.conf | grep "ldap"`
            if [ "${FIND}" = "" ]; then
                logtext "Result: LDAP authentication not enabled"
                Display --indent 2 --text "- Checking LDAP authentication support" --result "NOT ENABLED" --color WHITE
              else
                logtext "Result: LDAP authentication enabled"
                Display --indent 2 --text "- Checking LDAP authentication support" --result "ENABLED" --color GREEN
                LDAP_AUTH_ENABLED=1
            fi
          else
            logtext "Result: /etc/nsswitch.conf not found"
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9406
    # Description : Check LDAP servers in client configuration
    if [ ${LDAP_AUTH_ENABLED} -eq 1 ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
    Register --test-no AUTH-9406 --preqs-met ${PREQS_MET} --weight L --network NO --description "Query LDAP servers in client configuration"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: checking ldap.conf options"
        for I in ${LDAP_CONF_LOCATIONS}; do
            logtext "Test: checking ${I}"
            if [ -f ${I} ]; then
                logtext "Result: file ${I} exists, LDAP being used"
                LDAP_CLIENT_CONFIG_FILE="${I}"
                logtext "Test: checking LDAP servers in file ${I}"
                FIND2=`egrep "^host " ${I} | awk '{ print $2 }'`
                for I in ${FIND2}; do
                    Display --indent 6 --text "LDAP server: ${I}"
                    logtext "Result: found LDAP server ${I}"
                    report "ldap_server[]=${I}"
                done
              else
                logtext "Result: ${I} does NOT exist"
            fi
        done
    fi
#
#################################################################################
#
    # Test        : AUTH-9410
    # Description : Check PAM su root group restrict(add by kylin)
    Register --test-no AUTH-9410 --weight L --network NO --description "Check pam_wheel.so support"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: checking pam_wheel.so restrict"
        if [ -f /etc/pam.d/su ]; then
            logtext "Result: Found PAM conf for su"
            FIND=`cat /etc/pam.d/su | grep "^auth" | grep "pam_wheel"`
            if [ "$FIND" != "" ]; then
                logtext "Result: restrict su root support"
                Display --indent 2 --text "- Checking restrict su root support" --result "ENABLED" --color GREEN
              else
                logtext "Result: restrict su root support"
                Display --indent 2 --text "- Checking restrict su root support" --result "NOT ENABLED" --color WHITE
            fi
          else
            logtext "Result: NO PAM conf for su found"
            Display --indent 2 --text "- Checking restrict su root support" --result "NO CONFIG" --color RED
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9414
    # Description : Check history config restrict(add by kylin)
    Register --test-no AUTH-9414 --weight L --network NO --description "Check history config restrict"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: check history config restrict"
        Display --indent 2 --text "- Checking history config restrict"
        if [ -f /etc/profile ]; then
            logtext "Result: Found /etc/profile"
            FIND1=`cat /etc/profile | grep "^HISTSIZE" | awk -F= '{ print $2 }'`
            FIND2=`cat /etc/profile | grep "^HISTFILESIZE" | awk -F= '{ print $2 }'`
            # HISTSIZE
            logtext "Test: check HISTSIZE"
            if [ "$FIND1" != "" ]; then
                if [ $FIND1 -le 5 ]; then
                    logtext "Result: HISTSIZE enable"
                    Display --indent 4 --text "- Checking HISTSIZE" --result "ENABLE" --color GREEN
                  else
                    logtext "Result HISTSIZE too big"
                    Display --indent 4 --text "- Checking HISTSIZE" --result "SUGGESTION" --color YELLOW
                    ReportSuggestion ${TEST_NO} "HISTSIZE could be set less than 5"
                fi
              else
                logtext "Result: HISTSIZE not enable"
                Display --indent 4 --text "- Checking HISTSIZE" --result "NOT ENABLE" --color WHITE
                ReportSuggestion ${TEST_NO} "HISTSIZE could be set less than 5"
            fi
            # HISTFILESIZE
            logtext "Test: check HISTFILESIZE"
            if [ "$FIND2" != "" ]; then
                if [ $FIND2 -le 5 ]; then
                    logtext "Result: HISTFILESIZE enable"
                    Display --indent 4 --text "- Checking HISTFILESIZE" --result "ENABLE" --color GREEN
                  else
                    logtext "Result: HISTFILESIZE too big"
                    Display --indent 4 --text "- Checking HISTFILESIZE" --result "SUGGESTION" --color GREEN
                    ReportSuggestion ${TEST_NO} "HISTFILESIZE could be set less than 5"
                fi
              else
                logtext "Result: HISTFILESIZE not enable"
                Display --indent 4 --text "- Checking HISTFILESIZE" --result "NOT ENABLE" --color WHITE
                ReportSuggestion ${TEST_NO} "HISTFILESIZE could be set less than 5"
            fi
          else
            logtext "Result: NOT found /etc/profile"
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9418
    # Description : Check authentication failed attempts restrict(add by kylin)
    Register --test-no AUTH-9418 --weight L --network NO --description "Check authentication failed attempts restrict"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: check authentication failed attempts restrict"
        FIND=`cat /etc/pam.d/common-auth | grep ^auth | grep pam_tally`
        if [ "$FIND" != "" ]; then
            logtext "Result: access failed attempts ENABLE"
            Display --indent 2 --text "- Checking authentication failed attempts restrict" --result "ENABLE" --color GREEN
          else
            logtext "Result: access failed attempts NOT enable"
            Display --indent 2 --text "- Checking authentication failed attempts restrict" --result "NOT ENABLE" --color WHITE
        fi
    fi
#
#################################################################################
#
    # Test        : AUTH-9422
    # Description : Check system alias file(add by kylin)
    Register --test-no AUTH-9422 --weight L --network NO --description "Check system alias files"
    if [ ${SKIPTEST} -eq 0 ]; then
        logtext "Test: check system alias files"
        if [ -f /etc/aliases -o -f /etc/mail/aliases ]; then
            logtext "Result: alias file exists!"
            Display --indent 2 --text "- Checking alias file" --result "FOUND" --color WHITE
          else
            logtext "Result: alias file not exists!"
            Display --indent 2 --text "- Checking alias file" --result "NOT FOUND" --color GREEN
        fi
    fi
#
#################################################################################
#
report "ldap_auth_enabled=${LDAP_AUTH_ENABLED}"
report "ldap_pam_enabled=${LDAP_PAM_ENABLED}"
if [ ! "${LDAP_CLIENT_CONFIG_FILE}" = "" ]; then
    report "ldap_config_file=${LDAP_CLIENT_CONFIG_FILE}"
fi

wait_for_keypress

#
#================================================================================
# Lynis - Copyright 2007-2015, Michael Boelen, CISOfy - https://cisofy.com
